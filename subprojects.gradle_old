apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc).configureEach {
    options.encoding = "UTF-8"
}

// 输出设置为永远不是最新状态来强制它们在每次构建时执行
gradle.taskGraph.whenReady { taskGraph ->
    def tasks = taskGraph.getAllTasks()
    tasks.each {
        it.outputs.upToDateWhen { false }
    }
}

// 打源码包、Javadoc包
java {
    withJavadocJar()
    withSourcesJar()
}

// 子模块自定义, 默认是开启
bootJar {
    enabled = false
}

dependencyManagement {
    imports {
        mavenBom "com.xxf:xxf-dependencies:${xxf_version}"
    }
    resolutionStrategy { cacheChangingModulesFor 0, 'seconds' }
}

dependencies {
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.projectlombok:lombok")
    compileOnly("org.projectlombok:lombok")
    testImplementation("org.projectlombok:lombok")
}

// 全局禁用包
/*configurations {
    all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
}*/

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}
